; Disassembly of nsih.bin for the S5P6818
; This can be used on the NanoPi Fire3 or M3 as the first 512 bytes
; of a standalone executable.
;
; Tom Trebisky  8-25-2018

; The interesting part of this is that it handles the transition
; from 32 bit to 64 bit on the armv8.
; The on-chip bootloader runs in 32 bit mode (so apparently these
; Cortex-A53 cores come out of reset running in 32 bit mode).
; The on-chip bootloader loads this image to on-chip static ram
; at address 0xffff0000 and then branches to 0xffff0000,
; still running in 32 bit mode.
;
; When the smoke clears from this code running, it must switch
; to 64 bit mode and start running code at 0xffff0800 --
; At least that is what -must- happen since that is where
; the 64 bit code is waiting at, and this scheme actually works.
;
; But where is this address in the code that follows?
;
; I do have to point out that putting a 2K block of zeros at the
; start of the executable is somewhat extravagant, or seems so
; unless there is some need to be aligned at that boundary for
; the transition to 64 bit mode.  Only 512 bytes is needed for
; this header.

ffff0000 <.text>:
ffff0000:	ea000015 	b	0xffff005c
ffff0004:	ea00003c 	b	0xffff00fc
ffff0008:	ea00003b 	b	0xffff00fc
ffff000c:	ea00003a 	b	0xffff00fc
ffff0010:	ea000039 	b	0xffff00fc
ffff0014:	ea000038 	b	0xffff00fc
ffff0018:	ea000037 	b	0xffff00fc
ffff001c:	ea000036 	b	0xffff00fc

ffff0020:	00000000
ffff0024:	00000000
ffff0028:	00000000
ffff002c:	00000000
ffff0030:	00000000
ffff0034:	00000000
ffff0038:	00000000
ffff003c:	00000000

; Only the size field in the following gets modified when this
; 512 byte header gets installed.  It will be the size of the file
; (the file including the 512 byte header) minus 512.
; In other words, the number of bytes following this header.

ffff0040:	00000000	; must be zero
ffff0044:	00000000	; load size (after this header)
ffff0048:	ffff0000	; load address
ffff004c:	ffff0000	; launch address

ffff0050:	00000000
ffff0054:	00000000
ffff0058:	00000000

; startup comes here.

ffff005c:	e3010000 	movw	r0, #0x1000	; r0 = 0xc0011000
ffff0060:	e34c0001 	movt	r0, #0xc001
ffff0064:	e30c1200 	movw	r1, #0xc200	; r1 = 0x3fffc200
ffff0068:	e3431fff 	movt	r1, #0x3fff
ffff006c:	e3002000 	movw	r2, #0		; r2 = 0
ffff0070:	e3402000 	movt	r2, #0

; Registers at 0xC001_1000 are "tieoff" block registers.
; See page 4-32 in the s5p6818 user manual.
; The ones fiddled with here are all labelled as "ARM configuration registers"

; A note -- Study of the code from the startup file for the bl1 boot loader
; indicates that the 0xc0011140 register is the one that matters.
; That code does nothing with the 0xc0011144 register.
; The value placed there is shifted left 2 bits and used for the start address
; when things light up in 64 bit mode.  No idea why this whole gang
; of registers get set like this.
; That code sets the value 0x3fffc080, which becomes 0xffff0200, which is
; perhaps what this code wanted.
; This code gets 0xfff0800, which is 2048 bytes into the file !! ??

ffff0074:	e5801140 	str	r1, [r0, #320]	; r1 --> 0xc0011140
ffff0078:	e5802144 	str	r2, [r0, #324]	; r2 --> 0xc0011144
ffff007c:	e5801148 	str	r1, [r0, #328]	; r1 --> 0xc0011148
ffff0080:	e580214c 	str	r2, [r0, #332]	; r2 --> 0xc001114c
ffff0084:	e5801150 	str	r1, [r0, #336]	; r1 --> 0xc0011150
ffff0088:	e5802154 	str	r2, [r0, #340]	; r2 --> 0xc0011154
ffff008c:	e5801158 	str	r1, [r0, #344]	; r1 --> 0xc0011158
ffff0090:	e580215c 	str	r2, [r0, #348]	; r2 --> 0xc001115c
ffff0094:	e5801184 	str	r1, [r0, #388]	; r1 --> 0xc0011184
ffff0098:	e5802188 	str	r2, [r0, #392]	; r2 --> 0xc0011188
ffff009c:	e580118c 	str	r1, [r0, #396]	; r1 --> 0xc001118c
ffff00a0:	e5802190 	str	r2, [r0, #400]	; r2 --> 0xc0011190
ffff00a4:	e5801194 	str	r1, [r0, #404]	; r1 --> 0xc0011194
ffff00a8:	e5802198 	str	r2, [r0, #408]	; r2 --> 0xc0011198
ffff00ac:	e580119c 	str	r1, [r0, #412]	; r1 --> 0xc001119c
ffff00b0:	e58021a0 	str	r2, [r0, #416]	; r2 --> 0xc00111a0

ffff00b4:	e590113c 	ldr	r1, [r0, #316]	; r1 <-- 0xc001113c
ffff00b8:	e3811a0f 	orr	r1, r1, #0xf000
ffff00bc:	e580113c 	str	r1, [r0, #316]	; 0x13c

ffff00c0:	e5901180 	ldr	r1, [r0, #384]	; r1 <-- 0x0xc0011180
ffff00c4:	e38110f0 	orr	r1, r1, #0xf0
ffff00c8:	e5801180 	str	r1, [r0, #384]	; 0x180

; page 4-156 in the user manual
ffff00cc:	e5901138 	ldr	r1, [r0, #312]	; 0x138
ffff00d0:	e381160f 	orr	r1, r1, #0xf00000
ffff00d4:	e5801138 	str	r1, [r0, #312]	; 0x138

ffff00d8:	e590117c 	ldr	r1, [r0, #380]	; 0x17c
ffff00dc:	e3811a0f 	orr	r1, r1, #0xf000
ffff00e0:	e580117c 	str	r1, [r0, #380]	; 0x17c

; This next register is in the "clkpwr" block of the s5p6818
; It is the warm reset register.
; See bl1 sources nx_clkpwr.h
;
; volatile U32 CPUWARMRESETREQ;  /// 0x2AC : CPU Warm Reset Request Register
; #define PHY_BASEADDR_CLKPWR_MODULE                          0xC0010000
; 

ffff00e4:	e3000000 	movw	r0, #0		; r0 = 0xc0010000
ffff00e8:	e34c0001 	movt	r0, #0xc001

ffff00ec:	e59012ac 	ldr	r1, [r0, #684]	; 0xc00102ac
ffff00f0:	e3811001 	orr	r1, r1, #1
ffff00f4:	e58012ac 	str	r1, [r0, #684]	; 0xc00102ac

ffff00f8:	e320f003 	wfi

; Any interrupts or exceptions come here.
;
; The end result is to turn out the on-board LED on GPIO B12.
; then spin

ffff00fc:	e30b0000 	movw	r0, #0xb000	; r0 = 0xc001b000 (GPIO B)
ffff0100:	e34c0001 	movt	r0, #0xc001

; GPIO Alt Function register
ffff0104:	e5901020 	ldr	r1, [r0, #32]
ffff0108:	e3c11403 	bic	r1, r1, #50331648	; 0x3000000
ffff010c:	e3811402 	orr	r1, r1, #33554432	; 0x2000000
ffff0110:	e5801020 	str	r1, [r0, #32]

; GPIO data register
ffff0114:	e5901000 	ldr	r1, [r0]
ffff0118:	e3811a01 	orr	r1, r1, #4096	; 0x1000
ffff011c:	e5801000 	str	r1, [r0]

; GPIO output enable register
ffff0120:	e5901004 	ldr	r1, [r0, #4]
ffff0124:	e3811a01 	orr	r1, r1, #4096	; 0x1000
ffff0128:	e5801004 	str	r1, [r0, #4]

ffff012c:	eafffffe 	b	0xffff012c	; *** spin ***

; This begins a big block of text that is oddly
; crammed in here.

;   This is a boot header for Nexell
;   S5P6818 with a simple preloader.
;   CPU0 will switch to AArch64 starting at 0xffff0800.
;   If exceptions occur in AArch32 mode without setting VBAR,
;   CPU will drop in dead loop.

; ffff0130 5468 6973 2069 7320 6120 626f 6f74 2068   This is a boot h
; ffff0140 6561 6465 7220 666f 7220 4e65 7865 6c6c   eader for Nexell
; ffff0150 2053 3550 3638 3138 2077 6974 6820 6120    S5P6818 with a
; ffff0160 7369 6d70 6c65 2070 7265 6c6f 6164 6572   simple preloader
; ffff0170 2e20 4350 5530 2077 696c 6c20 7377 6974   . CPU0 will swit
; ffff0180 6368 2074 6f20 4141 7263 6836 3420 7374   ch to AArch64 st
; ffff0190 6172 7469 6e67 2061 7420 3078 6666 6666   arting at 0xffff
; ffff01a0 3038 3030 2e20 4966 2065 7863 6570 7469   0800. If excepti
; ffff01b0 6f6e 7320 6f63 6375 7220 696e 2041 4172   ons occur in AAr
; ffff01c0 6368 3332 206d 6f64 6520 7769 7468 6f75   ch32 mode withou
; ffff01d0 7420 7365 7474 696e 6720 5642 4152 2c20   t setting VBAR,
; ffff01e0 4350 5520 7769 6c6c 2064 726f 7020 696e   CPU will drop in
; ffff01f0 2064 6561 6420 6c6f 6f70 2e20 4e53 4948    dead loop. NSIH

ffff01fc:	4849534e	; the magic "NSIH" that is required
