/* Note by tjt about some values below that I have modified.
 *
 * What is somewhat confusing is that some of these values are read
 * by the on-chip loader to tell it what to do when loading this.
 * Other values are read by this code to tell it how and what to load.
 *
 * -- Location 0x54
 * Perhaps the most interesting value is at 0x54
 * This contains a byte at 0x57 which tell this what mode to
 * boot in.  I found this with the value 0x03, which tells is
 * to boot from SDMMC - I change this value to 0x00 to make this
 * boot from USB.
 *
 * -- Location 0x40
 * Location 0x40 tells this thing (bl1) the offset to what
 * it should load next from the SD card.
 * This is of no importance when this does a USB boot.
 * The value here was originally 0x8000
 *  (which is a 64 sector offset, i.e. 32K)
 * I changed this to 0x10200, which is a 129 sector offset.
 * This gives 1 sector for a partition table (the on-chip loader ignores it).
 * Then it allows 128 sectors for this thing (bl1), i.e. 64K
 * This must fit into the 64K SRAM, so surely nothing bigger is needed.
 * At this time, the size of bl1 is about 35K,
 *  so the old 32K offset was probably broken anyway.
 *
 * -- Location 0x44
 * This tells the on-chip loader the number of bytes to load,
 *  i.e. the size of this thing.
 *  This is 4*64K which is excessive, but works fine
 *  and I have left it as-is.
 *
 * Note the nice jump to A64 mode coded below in addresses
 *  0 to 0x3f
 */

    // see reference-nsih/drone-sd-64.txt
    .word 0xE3A00103	// 0x000 : MOV R0, #0xC0000000
    .word 0xE3800A11	// 0x004 : ORR R0, R0, #0x11000
    .word 0xE590113C	// 0x008 : LDR R1, [R0, #0x13C]		// tieoff reg select AArch mode
    .word 0xE3811A0F	// 0x00C : ORR R1, R1, #0xF000		// all group 0 cpu AArch64 mode
    .word 0xE580113C	// 0x010 : STR R1, [R0, #0x13C]
    .word 0xE3A025FF	// 0x014 : MOV R2, #0x3FC00000
    .word 0xE38229FF	// 0x018 : ORR R2, R2, #0x3FC000
    .word 0xE3822080	// 0x01C : ORR R2, R2, #0x80		// 0xFFFF0200>>2
    .word 0xE5802140	// 0x020 : STR R2, [R0, #0x140]		// Set AArch64 Reset Vector
    .word 0xE3A08103	// 0x024 : MOV R8, #0xC0000000
    .word 0xE3888801	// 0x028 : ORR R8, R8, #0x10000
    .word 0xE59892AC	// 0x02C : LDR R9, [R8, #0x2AC]		// system control reset req
    .word 0xE3899001	// 0x030 : ORR R9, R9, #0x1
    .word 0xE58892AC	// 0x034 : STR R9, [R8, #0x2AC]
    .word 0xE320F003	// 0x038 : WFI				// core 0 will be reset when wfi
    .word 0xEAFFFFFE	// 0x03C : B .

//    .word 0x00008000	// 0x040 : Device Read Address from 2ndboot Device.
    .word 0x00010200    // 0x040 : Device Read Address for next SD boot.
    .word 0x00040000	// 0x044 : Load Size for 2ndboot.
    .word 0xFFFF0000	// 0x048 : Load Address for 2ndboot.
    .word 0xFFFF0000	// 0x04C : Launch Address for 2ndboot.
    .word 0x00000000	// 0x050	[7:0] - Channel number
#ifdef BOOT_USB
    .word 0x00000000    // 0x054       <-- set 0 so this will boot from USB 
#else
    .word 0x03000000    // 0x054        Boot From SDMMC [31:24] - 0: USB, 1: SPI, 2: NAND, 3:SDMMC, 4: SDFS
#endif

    .word 0x00000000	// 0x058
    .word 0x100CC801	// 0x05C : PLL0		800MHz	P:3	M:200	S:1
    .word 0x100CC801	// 0x060 : PLL1		800MHz	P:3	M:200	S:1
    .word 0x50086601	// 0x064 : PLL2		614.4MHz	P:2	M:102	S:1	K:26214
    .word 0x100CC801	// 0x068 : PLL3		800MHz	P:3	M:200	S:1	K:0
    .word 0x66660104	// 0x06C : PLL2 SPREAD
    .word 0x00000104	// 0x070 : PLL3 SPREAD
    .word 0x00000601	// 0x074 : CPU G0	PLL1	/FCLK:800	/HCLK:200
    .word 0x00000208	// 0x078 : BUS		PLL0	/BCLK:400	/PCLK:200
    .word 0x00208003	// 0x07C : MEM		PLL3	/MDCLK:800	/MCLK:800	/MBCLK:400	/MPCLK:200
    .word 0x00000208	// 0x080 : GR3D		PLL0	/GR3DBCLK:400
    .word 0x00000208	// 0x084 : MPEG		PLL0	/MPEGBCLK:400	/MPEGPCLK:200
    .word 0x00000208	// 0x088 : DISP		PLL0	/DISPBCLK:400	/DISPPCLK:200
    .word 0x00000038	// 0x08C : HDMI		PLL0	/HDMIPCLK:100
    .word 0x00000601	// 0x090 : CPU G1	PLL1	/FCLK:800	/HCLK:200
    .word 0x00000208	// 0x094 : CCI4		PLL0	/CCI4BCLK:400	/CCI4PCLK:200
    .word 0x03100301	// 0x098	/Chip Num:1	/Chip Row:15	/Bus Width:16	/Chip Col:10
    .word 0x004007C0	// 0x09C	512MB x 2ea (16bit) x 1CS
    .word 0x06000B08	// 0x0A0	/CWL:8	/CL:11	/MR1_AL:0	/MR0_WR:6
    .word 0x0C0C0C0C	// 0x0A4
    .word 0x04040404	// 0x0A8
    .word 0x0000401B	// 0x0AC	/tPZQ:16411
    .word 0x00620618	// 0x0B0	/Refresh Interval:7.8us
    .word 0x6836650E	// 0x0B4	/tRFC:104	/tRRD:3	/tRP:6	/tRCD:6	/tRC:20	/tRAS:14
    .word 0x3630580B	// 0x0B8	/tWTR:3	/tWR:6	/tRTP:3
    .word 0x41000A26	// 0x0BC	/tFAW:16	/tXSR:256	/tXP:10	/tCKE:2
    .word 0x00020102	// 0x0C0	[23:16] MR1_RTT_Nom - 001: RZQ/4, 010: RZQ/2, 011: RZQ/6, 100: RZQ/12, 101: RZQ/8, [15:0] MR1_ODS - 0: RZQ/6, 1 : RZQ/7, [7:0] MR2_RTT_WR - 0: ODT disable, 1: RZQ/4, 2: RZQ/2
    .word 0x06060606	// 0x0C4	[31:24] Byte3, [23:16] Byte2, [15:8] Byte1, [7:0] Byte0 - 240ohm / (n + 1), n = (1 ~ 7)
    .word 0x06060606	// 0x0C8	[31:24] CA, [23:16] CS, [15:8] CKE, [7:0] CK - 240ohm / (n + 1), n = (1 ~ 7)
    .word 0x00000104	// 0x0CC	[15:8] ZQ_ODT, [7:0] ZQ_DDS - 240ohm / (n + 1), n = (1 ~ 7)
    .word 0x00000004	// 0x0D0	WR_CAL[4], RD_CAL[3], GT_LVL[2], CA_CAL[1], WR_LVL[0]
	.skip 0x124
    .word 0x68180300	// 0x1F8, BuildInfo
    .word 0x4849534E	// 0x1FC	"NSIH"
